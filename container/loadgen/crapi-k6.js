// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";
import "./libs/shim/expect.js";

export let options = { maxRedirects: 4 };

const Pre = Symbol.for("pre");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    "X-Forwarded-For": "",
    "X-Forwarded-For-Admin": "",
    vehicle_id: "",
    name: "",
    new_name: "",
    email: "",
    new_email: "",
    password: "",
    phone: "",
    token: "",
    VIN: "",
    PIN: "",
    report_id: "",
    product_id: "",
    order_id: "",
    video_id: "",
    adminToken: "",
    email_token: "",
    OTP: "",
    post_id: "",
    mechanicToken: ""
  },
  environment: {
    url: "https://apisec.sales-demo.f5demos.com"
  }
});

export default function() {
  postman[Pre].push(() => {
    const { Property } = require("postman-collection");
    var xff = pm.collectionVariables.get("X-Forwarded-For");
    if (!xff) {
      xff = Property.replaceSubstitutions("{{$randomIP}}");
      console.log("X-Forwarded-For  setting XFF to " + xff);
    }
    pm.collectionVariables.set("X-Forwarded-For", xff);
    pm.request.headers.remove("X-Forwarded-For");
    pm.request.headers.add({
      // These keys appears when you set a header by hand. Just for fun they are here
      disabled: false,
      // Your header, effectively
      key: "X-Forwarded-For",
      value: xff
    });
  });

  postman[Request]({
    name: "Signup example.com",
    id: "923280ea-fcda-4c4e-8a3a-ae57bbc18420",
    method: "POST",
    address: "{{url}}/identity/api/auth/signup",
    data:
      '{"name":"{{name}}","email":"{{email}}","number":"{{phone}}","password":"{{password}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = Property.replaceSubstitutions("{{$randomIP}}");
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
      let name = Property.replaceSubstitutions(
        "{{$randomFirstName}}.{{$randomLastName}}"
      );
      pm.collectionVariables.set("name", name);
      let newName = Property.replaceSubstitutions(
        "{{$randomFirstName}}.{{$randomLastName}}"
      );
      pm.collectionVariables.set("new_name", newName);
      let email = name + "@example.com";
      let newEmail = newName + "@example.com";
      let pass = Property.replaceSubstitutions("{{$randomPassword}}");
      let phone = Property.replaceSubstitutions(
        "{{$randomPhoneNumber}}"
      ).replace(/-/g, "");
      pm.collectionVariables.set("email", email);
      pm.collectionVariables.set("new_email", newEmail);
      pm.collectionVariables.set("password", pass);
      pm.collectionVariables.set("name", name);
      pm.collectionVariables.set("phone", phone);
      console.log(email, newEmail, pass, phone);
      console.log(name);
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    }
  });

  postman[Request]({
    name: "Login",
    id: "d80d97e3-67cc-4a1d-be0e-50e623ed3c74",
    method: "POST",
    address: "{{url}}/identity/api/auth/login",
    data: '{"email":"{{email}}","password":"{{password}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      console.log("X-Forwarded-For  setting XFF to " + xff);
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        pm.collectionVariables.set("token", jsonData.token);
        var token = pm.collectionVariables.get("token");
        pm.test("Token is set", function() {
          pm.expect(jsonData.token).to.eql(token);
        });
      });
    }
  });

  postman[Request]({
    name: "Verify JWT Token",
    id: "f245d29e-dd52-4b0a-8d44-e88e3281d819",
    method: "POST",
    address: "{{url}}/identity/api/auth/verify",
    data: '{\n    "token": "{{token}}"\n}',
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    }
  });

  postman[Request]({
    name: "Forgot Password",
    id: "7ddc0917-3e33-42f9-b7d4-6535f2f9231f",
    method: "POST",
    address: "{{url}}/identity/api/auth/forget-password",
    data: '{"email":"{{email}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        pm.test("Body matches string", function() {
          pm.expect(pm.response.text()).to.include("OTP Sent");
        });
      });
    }
  });

  postman[Request]({
    name: "SearchMailOTP",
    id: "da9bcf4f-539f-421f-b8f8-02d8258e4ae1",
    method: "GET",
    address: "{{url_mail}}/api/v2/search?kind=to&query={{email}}&limit=10",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      function dynamicSort(property) {
        var sortOrder = 1;
        if (property[0] === "-") {
          sortOrder = -1;
          property = property.substr(1);
        }
        return function(a, b) {
          /* next line works with strings and numbers,
           * and you may want to customize it to your needs
           */
          var result =
            a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;
          return result * sortOrder;
        };
      }
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        var mails = jsonData.items;

        pm.test("Your test name", function() {
          pm.expect(mails.length).to.be.gt(0);
          var mail = mails[0];
          console.log(mail);
          //mails.sort(dynamicSort("Created"));
          var mail = mails[0];
          var mbody = mail["Raw"]["Data"].replace(/[^a-zA-Z0-9<>:]*\n/g, "");
          console.log(mail);
          var otpmatch = mbody.match(/generated otp is: ([0-9]+)/);
          console.log(otpmatch);
          var otp = otpmatch[1];
          console.log("OTP: " + otp);
          pm.collectionVariables.set("OTP", otp);
        });
      });
    }
  });

  postman[Request]({
    name: "Check OTP",
    id: "fd3183fe-7e6c-4acd-b51a-cc622a5a773f",
    method: "POST",
    address: "{{url}}/identity/api/auth/v3/check-otp",
    data:
      '{\n    "email": "{{email}}",\n    "otp": "{{OTP}}",\n    "password": "{{password}}"\n}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    }
  });

  postman[Request]({
    name: "Resend vehicle email",
    id: "3c9391bd-c769-475b-8fd3-3a5bf38a1116",
    method: "POST",
    address: "{{url}}/identity/api/v2/vehicle/resend_email",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "SearchMailVehicle",
    id: "d7f56b80-acc1-4f06-a53d-4a45ad503c54",
    method: "GET",
    address: "{{url_mail}}/api/v2/search?kind=to&query={{email}}&limit=10",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      function dynamicSort(property) {
        var sortOrder = 1;
        if (property[0] === "-") {
          sortOrder = -1;
          property = property.substr(1);
        }
        return function(a, b) {
          /* next line works with strings and numbers,
           * and you may want to customize it to your needs
           */
          var result =
            a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;
          return result * sortOrder;
        };
      }
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        var mails = jsonData.items;

        pm.test("Your test name", function() {
          pm.expect(mails.length).to.be.gt(0);
          console.log(mails[0]);
          //mails.sort(dynamicSort("Created"));
          console.log(mails[0]);
          var mail = mails[0];
          var mbody = mail["Raw"]["Data"].replace(/[^a-zA-Z0-9<>:]*\n/g, "");
          var vintext = mbody.match(/VIN(.*)Pincode/i);
          console.log(vintext);
          var VIN = vintext[1].match(/>([A-Za-z0-9]+)</)[1];
          console.log("VIN: " + VIN);
          var pintext = mbody.match(/Pincode(.*)We're/);
          console.log(pintext);
          var PIN = pintext[1].match(/>([0-9]+)</)[1];
          console.log("PIN: " + PIN);
          pm.collectionVariables.set("VIN", VIN);
          pm.collectionVariables.set("PIN", PIN);
        });
      });
    }
  });

  postman[Request]({
    name: "Add Vehicle from Mail",
    id: "f3c1ca51-2989-4e06-a982-32aad963cb65",
    method: "POST",
    address: "{{url}}/identity/api/v2/vehicle/add_vehicle",
    data: '{"vin": "{{VIN}}", "pincode": "{{PIN}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get Dashboard",
    id: "67bdcd44-b6e1-4b6c-9554-cfa9f2a21fc4",
    method: "GET",
    address: "{{url}}/identity/api/v2/user/dashboard",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get vehicles",
    id: "c2b0cccf-c306-48b1-aec4-71b61fcc4cdd",
    method: "GET",
    address: "{{url}}/identity/api/v2/vehicle/vehicles",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = pm.response.json();
        pm.collectionVariables.set("vehicle_id", jsonData[0].uuid);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get recent posts",
    id: "e699a1da-5c95-4477-aa89-ec8b1481029b",
    method: "GET",
    address:
      "{{url}}/community/api/v2/community/posts/recent?limit=30&offset=0",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Create post ",
    id: "495d142a-5c76-46d9-8557-9aa6f3c8156f",
    method: "POST",
    address: "{{url}}/community/api/v2/community/posts",
    data:
      '{"title":"{{$randomLoremSentence}}","content":"{{$randomLoremParagraph}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        var order = jsonData.id;
        pm.collectionVariables.set("post_id", order);
        console.log(order);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get post",
    id: "4991be69-79bf-4d03-be2a-fd23e8ed83f7",
    method: "GET",
    address: "{{url}}/community/api/v2/community/posts/{{post_id}}",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Post comment",
    id: "d1900161-e57a-449c-ae46-2909c3a4a9ef",
    method: "POST",
    address: "{{url}}/community/api/v2/community/posts/{{post_id}}/comment",
    data: '{"content":"{{$randomLoremSentence}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get vehicle location",
    id: "9cb29875-fd5f-487e-9067-0fef77e7fcc9",
    method: "GET",
    address: "{{url}}/identity/api/v2/vehicle/{{vehicle_id}}/location",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get All Mechanics",
    id: "742d8e81-bab1-4815-bcfe-ae5a6fca79b6",
    method: "GET",
    address: "{{url}}/workshop/api/mechanic",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Contact mechanic",
    id: "16c39ee9-cf20-4a55-82a0-0e49aa70013b",
    method: "POST",
    address: "{{url}}/workshop/api/merchant/contact_mechanic",
    data:
      '{\r\n    "mechanic_code": "TRAC_JHN",\r\n    "problem_details": "Hi Jhon",\r\n    "vin": "{{VIN}}",\r\n    "mechanic_api": "{{url}}/workshop/api/mechanic/receive_report",\r\n    "repeat_request_if_failed": false,\r\n    "number_of_repeats": 1\r\n}',
    headers: {
      Authorization:
        "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtb25zdGVyQGRhcmt3ZWIuY29tIiwiaWF0IjoxNjA4NTQzODI0LCJleHAiOjE2MDg2MzAyMjR9.AAIvhrtstlloPf7-NNCcmhEZm-XkO1aO3x3CLns1em7ft9U77B88LpK9jIrF8C-IH32JPWVazRFo0gBIBZ9FpA",
      "User-Agent":
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = pm.response.json();
        pm.collectionVariables.set(
          "report_id",
          jsonData.response_from_mechanic_api.id
        );
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Mechanic Login",
    id: "616e6621-3e64-43f2-8809-14b5c939dff7",
    method: "POST",
    address: "{{url}}/identity/api/auth/login",
    data: '{"email":"jhon@example.com","password":"Admin1@#"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = Property.replaceSubstitutions("{{$randomIP}}");
      pm.collectionVariables.set("X-Forwarded-For-Admin", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        pm.collectionVariables.set("mechanicToken", jsonData.token);
        var token = pm.collectionVariables.get("mechanicToken");
        pm.test("Token is set", function() {
          pm.expect(jsonData.token).to.eql(token);
        });
      });
    }
  });

  postman[Request]({
    name: "Service Requests",
    id: "6305339f-68d1-483a-b9cc-7287a92b1180",
    method: "GET",
    address: "{{url}}/workshop/api/mechanic/service_requests?limit=30&offset=0",
    headers: {
      Authorization:
        "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtb25zdGVyQGRhcmt3ZWIuY29tIiwiaWF0IjoxNjA4NTQzODI0LCJleHAiOjE2MDg2MzAyMjR9.AAIvhrtstlloPf7-NNCcmhEZm-XkO1aO3x3CLns1em7ft9U77B88LpK9jIrF8C-IH32JPWVazRFo0gBIBZ9FpA",
      "User-Agent":
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("mechanicToken")}`;
    }
  });

  postman[Request]({
    name: "GetReport",
    id: "e49b4988-57ea-4b42-84f1-46b955197b6d",
    method: "GET",
    address:
      "{{url}}/workshop/api/mechanic/mechanic_report?report_id={{report_id}}",
    headers: {
      Authorization:
        "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtb25zdGVyQGRhcmt3ZWIuY29tIiwiaWF0IjoxNjA4NTQzODI0LCJleHAiOjE2MDg2MzAyMjR9.AAIvhrtstlloPf7-NNCcmhEZm-XkO1aO3x3CLns1em7ft9U77B88LpK9jIrF8C-IH32JPWVazRFo0gBIBZ9FpA",
      "User-Agent":
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get products",
    id: "14629bbf-bcd3-4f68-b476-4ed992e71e17",
    method: "GET",
    address: "{{url}}/workshop/api/shop/products",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = pm.response.json();
        var productId = jsonData.products[0].id;
        pm.collectionVariables.set("product_id", productId);
        console.log("Product ID ", productId);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Validate coupon",
    id: "34777b0a-7533-4ba8-9b80-a2f0f4579522",
    method: "POST",
    address: "{{url}}/community/api/v2/coupon/validate-coupon",
    data: '{"coupon_code":"TRAC075"}',
    headers: {
      Authorization:
        "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtb25zdGVyQGRhcmt3ZWIuY29tIiwiaWF0IjoxNjA4MDMxMDk5LCJleHAiOjE2MDgxMTc0OTl9.lQr14VeNm_lOmKiOIKwO6mRu_47VEU8HVWEsyBzbeaVXzIthwnTC4mNmYb0qNW2--T20_P9sOjTWtMJjKRQCJA",
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Apply coupon",
    id: "e9d81a0a-9f51-40ab-a5fb-7ecaa5148793",
    method: "POST",
    address: "{{url}}/workshop/api/shop/apply_coupon",
    data: '{"coupon_code":"TRAC075","amount":65}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Create Order",
    id: "deae5bfe-4a1b-495f-8ca0-7ad6d92a21e0",
    method: "POST",
    address: "{{url}}/workshop/api/shop/orders",
    data: '{"product_id":{{product_id}},"quantity":1}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        var order = jsonData.id;
        pm.collectionVariables.set("order_id", order);
        console.log(order);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get orders",
    id: "f93cb376-4e4c-44b1-b12a-ddd0361f1b2a",
    method: "GET",
    address: "{{url}}/workshop/api/shop/orders/all?limit=30&offset=0",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get Order",
    id: "56409534-302b-4d24-84ab-189770b70499",
    method: "GET",
    address: "{{url}}/workshop/api/shop/orders/{{order_id}}",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Return order",
    id: "c408b1d0-7ece-4d58-921e-e77fb5982bf5",
    method: "POST",
    address:
      "{{url}}/workshop/api/shop/orders/return_order?order_id={{order_id}}",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Add video",
    id: "b309f8eb-f73e-4c41-bef2-372cb9826506",
    method: "POST",
    address: "{{url}}/identity/api/v2/user/videos",
    data:
      '\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name="file"; filename="abc.mp4"\r\nContent-Type: video/mp4\r\n\r\nhakfhas\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type":
        "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        var video_id = jsonData.id;
        pm.collectionVariables.set("video_id", video_id);
        console.log(video_id);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get Video",
    id: "76e30665-63ee-4b5c-ac80-560c0ab0bcee",
    method: "GET",
    address: "{{url}}/identity/api/v2/user/videos/{{video_id}}",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Change Video Name",
    id: "efe263fa-904f-4fb8-bb3f-cca2655c2b00",
    method: "PUT",
    address: "{{url}}/identity/api/v2/user/videos/{{video_id}}",
    data: '{"videoName":"{{$randomNoun}}.mp4"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Share video",
    id: "ab942fd0-dbab-469f-9f85-8100686d3e01",
    method: "GET",
    address:
      "{{url}}/identity/api/v2/user/videos/convert_video?video_id={{video_id}}",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 403", function() {
        pm.response.to.have.status(403);
        pm.expect(pm.response.text()).to.include(
          "S-hould be accessed only inte-Rnally"
        );
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get user dashboard",
    id: "96c50c9f-47ba-4e1d-889e-9a73ad90264b",
    method: "GET",
    address: "{{url}}/identity/api/v2/user/dashboard",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Add new video",
    id: "f3026b90-2222-4a19-bc5c-2dfa0ba763bf",
    method: "POST",
    address: "{{url}}/identity/api/v2/user/videos",
    data:
      '\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name="file"; filename="abc.mp4"\r\nContent-Type: video/mp4\r\n\r\nhakfhas\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type":
        "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        var video_id = jsonData.id;
        pm.collectionVariables.set("video_id", video_id);
        console.log(video_id);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Delete video",
    id: "b9f9ff24-8fc0-4601-95f5-3e878385f52b",
    method: "DELETE",
    address: "{{url}}/identity/api/v2/user/videos/{{video_id}}",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 403", function() {
        pm.response.to.have.status(404);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Admin Login",
    id: "a00b2d3e-b7a8-4907-8af8-63a6f038c9c4",
    method: "POST",
    address: "{{url}}/identity/api/auth/login",
    data: '{"email":"admin@example.com","password":"Admin!123"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = Property.replaceSubstitutions("{{$randomIP}}");
      pm.collectionVariables.set("X-Forwarded-For-Admin", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        pm.collectionVariables.set("adminToken", jsonData.token);
        var token = pm.collectionVariables.get("adminToken");
        pm.test("Token is set", function() {
          pm.expect(jsonData.token).to.eql(token);
        });
      });
    }
  });

  postman[Request]({
    name: "Add Product",
    id: "faf9564e-e0e7-4c12-9e27-ff2b01853f18",
    method: "POST",
    address: "{{url}}/workshop/api/shop/products",
    data:
      '{\n    "name": "NewSeat",\n    "price": 100,\n    "image_url": "images/seat.svg"\n}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = pm.response.json();
        var productId = jsonData.id;
        pm.collectionVariables.set("product_id", productId);
        console.log("Product ID ", productId);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("adminToken")}`;
    }
  });

  postman[Request]({
    name: "Delete video by admin",
    id: "b7c51058-aef1-41b1-b0af-1c670a0010b5",
    method: "DELETE",
    address: "{{url}}/identity/api/v2/admin/videos/{{video_id}}",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For-Admin");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For-Admin", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("adminToken")}`;
    }
  });

  postman[Request]({
    name: "ReAdd new video",
    id: "56a1b702-c4bc-4160-8a01-203794b62a4c",
    method: "POST",
    address: "{{url}}/identity/api/v2/user/videos",
    data:
      '\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name="file"; filename="abc.mp4"\r\nContent-Type: video/mp4\r\n\r\nhakfhas\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type":
        "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        var video_id = jsonData.id;
        pm.collectionVariables.set("video_id", video_id);
        console.log(video_id);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Get Workshop User Details",
    id: "14328c25-cb80-40b8-bba6-8463e5254ae0",
    method: "GET",
    address: "{{url}}/workshop/api/management/users/all?limit=30&offset=0",
    data:
      '\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name="file"; filename="abc.mp4"\r\nContent-Type: video/mp4\r\n\r\nhakfhas\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type":
        "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        var video_id = jsonData.id;
        pm.collectionVariables.set("video_id", video_id);
        console.log(video_id);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("adminToken")}`;
    }
  });

  postman[Request]({
    name: "Change email",
    id: "ae374591-79b9-4bfa-acd6-52368808bfb4",
    method: "POST",
    address: "{{url}}/identity/api/v2/user/change-email",
    data: '{"old_email":"{{email}}","new_email":"{{new_email}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "SearchMailVerificationToken",
    id: "1228f56e-12ee-4449-b60a-5facc829c3b4",
    method: "GET",
    address: "{{url_mail}}/api/v2/search?kind=to&query={{new_email}}&limit=10",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      function dynamicSort(property) {
        var sortOrder = 1;
        if (property[0] === "-") {
          sortOrder = -1;
          property = property.substr(1);
        }
        return function(a, b) {
          /* next line works with strings and numbers,
           * and you may want to customize it to your needs
           */
          var result =
            a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;
          return result * sortOrder;
        };
      }
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        var mails = jsonData.items;

        pm.test("Get Token", function() {
          pm.expect(mails.length).to.be.gt(0);
          //mails.sort(dynamicSort("Created"));
          var mail = mails[0];
          var mbody = mail["Raw"]["Data"].replace(/[^a-zA-Z0-9<>:]*\n/g, "");
          console.log(mbody);
          var tokentext = mbody.match(/token:\s*[^\s]+/i);
          console.log(tokentext);
          var email_token = tokentext[0].match(/>([A-Za-z0-9]+)</)[1];
          console.log("Token: " + email_token);
          pm.collectionVariables.set("email_token", email_token);
        });
      });
    }
  });

  postman[Request]({
    name: "Verify email token",
    id: "a4b0e837-47d3-4ab9-a7f4-966fadae8de2",
    method: "POST",
    address: "{{url}}/identity/api/v2/user/verify-email-token",
    data:
      '{"old_email": "{{email}}", "new_email":"{{new_email}}","token":"{{email_token}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Login Back",
    id: "272e8b4a-55ab-4f19-a954-16e9d63ab215",
    method: "POST",
    address: "{{url}}/identity/api/auth/login",
    data: '{"email":"{{new_email}}","password":"{{password}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        pm.collectionVariables.set("token", jsonData.token);
        var token = pm.collectionVariables.get("token");
        pm.test("Token is set", function() {
          pm.expect(jsonData.token).to.eql(token);
        });
      });
    }
  });

  postman[Request]({
    name: "Change email Back",
    id: "c34c5ac1-2d26-4eff-8bf2-21cd37d5afee",
    method: "POST",
    address: "{{url}}/identity/api/v2/user/change-email",
    data: '{"old_email":"{{new_email}}","new_email":"{{email}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "SearchMailVerificationToken Back",
    id: "9b69a594-e7de-4e97-95c1-b755187386b2",
    method: "GET",
    address: "{{url_mail}}/api/v2/search?kind=to&query={{email}}",
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      function dynamicSort(property) {
        var sortOrder = 1;
        if (property[0] === "-") {
          sortOrder = -1;
          property = property.substr(1);
        }
        return function(a, b) {
          /* next line works with strings and numbers,
           * and you may want to customize it to your needs
           */
          var result =
            a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;
          return result * sortOrder;
        };
      }
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        var mails = jsonData.items;

        pm.test("Get Token", function() {
          pm.expect(mails.length).to.be.gt(0);
          //mails.sort(dynamicSort("Created"));
          var mail = mails[0];
          var mbody = mail["Raw"]["Data"].replace(/[^a-zA-Z0-9<>:]*\n/g, "");
          console.log(mbody);
          var tokentext = mbody.match(/token:\s*[^\s]+/i);
          console.log(tokentext);
          var email_token = tokentext[0].match(/>([A-Za-z0-9]+)</)[1];
          console.log("Token: " + email_token);
          pm.collectionVariables.set("email_token", email_token);
        });
      });
    }
  });

  postman[Request]({
    name: "Verify email token Back",
    id: "d3f635a9-973b-4d69-bf8c-7999a66604d1",
    method: "POST",
    address: "{{url}}/identity/api/v2/user/verify-email-token",
    data:
      '{"old_email": "{{new_email}}", "new_email":"{{email}}","token":"{{email_token}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    },
    auth(config, Var) {
      config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
    }
  });

  postman[Request]({
    name: "Login",
    id: "e7a1f6ac-d08d-4360-a1ee-645a989ec181",
    method: "POST",
    address: "{{url}}/identity/api/auth/login",
    data: '{"email":"{{email}}","password":"{{password}}"}',
    headers: {
      "User-Agent":
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
      "Content-Type": "application/json",
      Accept: "*/*"
    },
    pre() {
      const { Property } = require("postman-collection");
      var xff = pm.collectionVariables.get("X-Forwarded-For");
      if (!xff) {
        xff = Property.replaceSubstitutions("{{$randomIP}}");
        console.log("X-Forwarded-For  setting XFF to " + xff);
      }
      pm.collectionVariables.set("X-Forwarded-For", xff);
      pm.request.headers.remove("X-Forwarded-For");
      pm.request.headers.add({
        // These keys appears when you set a header by hand. Just for fun they are here
        disabled: false,
        // Your header, effectively
        key: "X-Forwarded-For",
        value: xff
      });
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
        var jsonData = JSON.parse(responseBody);
        pm.collectionVariables.set("token", jsonData.token);
        var token = pm.collectionVariables.get("token");
        pm.test("Token is set", function() {
          pm.expect(jsonData.token).to.eql(token);
        });
      });
    }
  });

  postman[Request]({
    name: "Get Public Key",
    id: "2eb3614d-96ee-43bc-a045-c019b385c46e",
    method: "GET",
    address: "{{url}}/.well-known/jwks.json",
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
    }
  });

  postman[Pre].pop();
}
